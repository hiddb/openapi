openapi: 3.0.0
servers:
  - url: https://{service}.hiddb.io
    description: Access to your HIDDB databases
    variables:
      service:
        default: api
        enum:
          - "api"
          - "{database_id}"

info:
  description: |
    This is the official API documentation for the HIDDB vector search database.

    In order to get started you will need to generate a API access key and secret token.
    Sign in into the your [dashboard](https://dashboard.hiddb.com/) and navigate to `API Access` / `Create API Key`.
    Make sure to copy the token because it won't be shown to you again.

    Now you can sign in your machine by requesting a temporary JSON Web Token (JWT) by performing a GET request to `hiddb.io/machine/login`.
  
    ```bash
    KEY="<key>"
    SECRET="<secret>"
    TOKEN=`\
    curl --location \
         --request POST "https://api.hiddb.io/machine/login" \
         --header "Content-Type: application/json" \
         --header "Accept: application/json" \
         --data-raw "{
             \"access_key\": \"$KEY\",
             \"secret_key\": \"$SECRET\"
         }" | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])"`
    ```

    Once you have your API Token created, all API requests are authorized in the same way. 
    HIDDB uses the RFC standard `Authorization: Bearer <Token>` interface.
    When used in an example API request it looks like this:

    ```bash
    DATABASE_ID="<database_id>"
    curl --location \
         --request GET "https://${DATABASE_ID}.hiddb.io/collection" \
         --header "Accept: application/json" \
         --header "Authorization: Bearer $TOKEN"
    ```

    Congratulations your have now full and secure control over your personal HIDDB database.

  version: 0.2.3
  title: API documentation
  termsOfService: "https:/hiddb.com/terms"
  license:
    name: Propretary Licence
    url: "https://hiddb.com/licence"
tags:
  - name: Check health
    description: Check if you are all good
  - name: User Authentification
    description: User authentification
  - name: Machine Authentification
    description: Machine authentification
  - name: Database
    description: Operations on databases
  - name: Instance
    description: Operations on instances
  - name: Collection
    description: Operations on collections
  - name: Index
    description: Operations on indices
  - name: Document
    description: Operations on documents

paths:
  ############################## User Authentification ######################################

  /user/register:
    $ref: "./user/register.yaml" 

  /user/reset:
    $ref: "./user/reset.yaml" 

  /user/update/verify:
    $ref: "./user/update/verify.yaml" 

  /user/update/reset:
    $ref: "./user/update/reset.yaml" 

  /user/login:
    $ref: "./user/login.yaml" 

  /user/logout:
    $ref: "./user/logout.yaml" 

  /user/refresh:
    $ref: "./user/refresh.yaml" 

  ############################## Machine Authentification ######################################

  /machine/login:
    $ref: "./machine/login.yaml" 

  /machine:
    $ref: "./machine/index.yaml" 

  /machine/{machine_id}:
    $ref: "./machine/machine_id/index.yaml"

  ############################## Check connection ######################################

  /health:
    $ref: "./health/index.yaml"

  ############################## Databases #############################################

  /database:
    $ref: "./database/index.yaml"

  /database/{database_id}:
    $ref: "./database/database_id/index.yaml"

  # ############################## Instances #############################################

  /instance:
    $ref: "./instance/index.yaml"

  /instance/{instance_id}:
    $ref: "./instance/instance_id/index.yaml"

  ############################## Collection #############################################

  # /collection:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations

  #   get:
  #     tags:
  #       - Collection
  #     description: Get information about collections
  #     summary: Get collections
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionsResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  #   post:
  #     tags:
  #       - Collection
  #     description: Create new collection
  #     summary: Create collection
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/CollectionRequest"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # /collection/{collection_name}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   get:
  #     tags:
  #       - Collection
  #     description: Get information about a specific collection
  #     summary: Get collection
  #     parameters:
  #       - name: collection_name
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           minLength: 3
  #           maxLength: 20
  #           pattern: "^[a-z0-9_-]{3,20}$"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  #   delete:
  #     tags:
  #       - Collection
  #     description: Delete a specific collection
  #     summary: Delete collection
  #     parameters:
  #       - name: collection_name
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           minLength: 3
  #           maxLength: 20
  #           pattern: "^[a-z0-9_-]{3,20}$"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # ############################## Index ##################################################

  # /collection/{collection_name}/index:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   get:
  #     tags:
  #       - Index
  #     description: Get information about an existing indices
  #     summary: Get indices
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndicesResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  #   post:
  #     tags:
  #       - Index
  #     description: Create new index in the specified collection
  #     summary: Create index
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/IndexRequest"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndexResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # /collection/{collection_name}/index/{field_name}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"
  #     - $ref: "#/components/parameters/IndexId"

  #   get:
  #     tags:
  #       - Index
  #     description: Get information about specific index
  #     summary: Get index
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndexResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  #   delete:
  #     tags:
  #       - Index
  #     description: Delete index
  #     summary: Delete index
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndexResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # ############################## Document ###############################################

  # /collection/{collection_name}/document:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   post:
  #     tags:
  #       - Document
  #     description:
  #       Insert document. The field "field_name" will be indexed by all existing
  #       indices
  #     summary: Insert document
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/DocumentRequest"
  #     responses:
  #       200:
  #         description: Insertion successful
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # /collection/{collection_name}/document/search:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   post:
  #     tags:
  #       - Document
  #     description: "Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead"
  #     summary: ANN-search
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/SearchRequest"
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/SearchResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  # /collection/{collection_name}/document/{document_id}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"
  #     - $ref: "#/components/parameters/DocumentId"

  #   get:
  #     tags:
  #       - Document
  #     description: Get document by ID
  #     summary: Get document by ID
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/DocumentResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

  #   delete:
  #     tags:
  #       - Document
  #     description: This feature is not available yet but coming soon! Remove document by ID. The corresponding indices will be updated
  #     summary: Remove document by ID
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/DocumentResponse"
  #       default:
  #         $ref: "./responses/errors/default.yaml"

############################## Components #############################################

components:
  parameters:
    UserId:
      name: user_id
      in: path
      description: "Your user ID. You can find your user ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    MachineId:
      name: machine_id
      in: path
      description: "The ID of the machine"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    OrganizationId:
      name: organization_id
      in: path
      description: "Your organization ID. You can find your organization ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

  schemas:
    CollectionRequest:
      description: Collection details
      type: object
      required:
        - collection_name
      properties:
        collection_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

    CollectionsResponse:
      type: object
      required:
        - collections
      properties:
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionResponse"

    CollectionResponse:
      type: object
      required:
        - collection_name
      properties:
        collection_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

    IndexRequest:
      type: object
      required:
        - field_name
        - dimension
      properties:
        field_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

        dimension:
          type: integer
          format: int64

    DocumentRequest:
      additionalProperties: true
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                minLength: 3
                maxLength: 50
              field:
                type: array
                items:
                  type: number
                  format: double
                example: [1.0, 2.0, 3.0]

    DocumentResponse:
      type: object
      additionalProperties: true
      required:
        - id
      properties:
        id:
          type: string
          minLength: 3
          maxLength: 50
        field:
          type: array
          items:
            type: number
            format: double
          example: [1.0, 2.0, 3.0]

    IndexResponse:
      type: object
      required:
        - collection_name
        - field_name
        - n_documents
        - distance_metric
        - dimension
      properties:
        collection_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        field_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        n_documents:
          type: integer
          format: int64
        distance_metric:
          type: string
          enum: ["euclidean"]
        dimension:
          type: integer
          format: int64

    IndicesResponse:
      type: object
      required:
        - indices
      properties:
        indices:
          type: array
          items:
            $ref: "#/components/schemas/IndexResponse"

    SearchRequest:
      type: object
      required:
        - max_neighbors
        - field_name
      properties:
        ids:
          type: array
          items:
            type: string
          example: ["document1", "document2", "document3"]
          description: Get documents close to the specified document. Provide either `ids` or `vectors`
        vectors:
          type: array
          items:
            type: array
            items:
              type: number
          example: [[1.0, 2.0, 3.0]]
          description: Get documents close to the vector. The length of the vector must be equal to the dimension specified in the index
        max_neighbors:
          type: number
          default: 20
          minimum: 1
          description: Maximal number of neighbors to include in response
        field_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9_-]{3,20}$"
          description: This parameter specifies the index to perform the query in
          example: "xxxxxxxxxxxxxxxxxx"

    SearchResponse:
      type: array
      items:
        type: object
        properties:
          data:
            type: array
            items:
              type: array
              items:
                type: string
              
    ErrorResponse:
      type: object 
      properties:
        error:
          type: string
                  
  responses:
    defaultError:
      description: error
      content:
        application/json:
          schema:
            type: object 
            properties:
              error:
                type: string