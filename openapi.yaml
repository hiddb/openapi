openapi: 3.0.0
servers:
  - url: https://{service}.hiddb.io
    description: Access to your HIDDB databases
    variables:
      service:
        default: api
        enum:
          - "api"
          - "{database_id}"

info:
  description: |
    This is the official API documentation for the HIDDB vector search database.

    # Introduction

    If you landed here and are not aware about the motivation and benefits of vector search you may want to consult our [tutorial](https://hiddb.com/learn) first.

    HIDDB runs on one or multiple physical compute `instances`.
    HIDDB stores data in `documents` which can be represented as JSON objects.
    Documents are stored in `collections` (similar to SQL tables but with no schema) within a database to store and organize documents.
    To be able to search through collections, `indices` can be created within collections.

    HIDDB allows you to
      - create and delete databases,
      - create and delete `collections` within your databases,
      - add / remove `documents to / from your `collections`,
      - create / delete `indices` to be able to search for `documents` efficiently.

    Your instances, databases, collections and indices are displayed in your [dashboard](https://hiddb.com/dashboard).

    We maintain a RESTful API and operate over HTTPS and JSON which is documentated here.
    As an alternative to working directly with our API you may consider to use our [Python library](https://github.com/hiddb/python-python-sdk).

    # Getting started

    In order to get started you will need to generate a API access key and secret token.
    Sign in into the your [dashboard](https://hiddb.com/dashboard) and navigate to `API Tokens`.
    Make sure to copy the token because it won't be shown to you again.

    Now you have to sign in your machine by requesting a temporary JSON Web Token (JWT) by performing a GET request to `hiddb.io/machine/login`.

    You're now ready to do your first request against the API.
    You can try make a simple GET request to `/health/dashboard` and `/health/database` using your JWT.
    If the response is `OK` for both requests everything worked out. 
    Congratulations your have now full and secure control over your personal HIDDB database.

    # Cross-Origin Resource Sharing
    This API does not feature Cross-Origin Resource Sharing (CORS) 
    and thus does not allow cross-domain communication from the browser by default.
    To enable cors go to your dashboard.
    Warning: Doing so makes your database completely public and accessible to everyone, including any code on any site.

  version: 0.0.1
  title: API documentation
  termsOfService: "https:/hiddb.com/terms"
  license:
    name: Propretary Licence
    url: "https://hiddb.com/licence"
tags:
  - name: Check health
    description: Check if you are all good
  - name: User Authentification
    description: User authentification
  - name: Machine Authentification
    description: Machine authentification
  - name: Organization
    description: Operations on organizations
  - name: User
    description: Operations on users
  - name: Database
    description: Operations on databases
  - name: Instance
    description: Operations on instances
  - name: Collection
    description: Operations on collections
  - name: Index
    description: Operations on indices
  - name: Document
    description: Operations on documents

paths:
  ############################## User Authentification ######################################

  /user/register:
    post:
      tags:
        - User Authentification
      summary: Register user
      description: Register user. Email containing URL with OTP is send out to user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true

  /user/update/verify:
    post:
      tags:
        - User Authentification
      summary: Verify user's email
      description: Verify email adress provided by the user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserVerify"
        required: true

  /user/reset:
    post:
      tags:
        - User Authentification
      summary: User password reset
      description: Send URL containing OTP to email adress provided by user to reset password.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserReset"
        required: true

  /user/update/reset:
    post:
      tags:
        - User Authentification
      summary: Update password
      description: Reset password as requested by the user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateReset"
        required: true

  /user/login:
    post:
      tags:
        - User Authentification
      description: User login using access and secret token.
      summary: User login
      operationId: userLogin

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Login email and password in exchange for JWT.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true

  /user/refresh:
    post:
      tags:
        - User Authentification
      description: Refresh access token using cookie
      summary: Refresh JWT
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Exchange access and secret token for JSON web token (JWT).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRefresh"
        required: true

  ############################## Machine Authentification ######################################

  /machine/login:
    post:
      tags:
        - Machine Authentification
      description: Machine login using access and secret token.
      summary: Machine login
      operationId: machineLogin

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Exchange access and secret token for JSON web token (JWT).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineLogin"
        required: true

  /organization/{organization_id}/machine:
    parameters:
      - $ref: "#/components/parameters/OrganizationId"

    post:
      tags:
        - Machine Authentification
      description: Create access and secret key for a new machine
      summary: Create api keys for a new machine
      operationId: createMachine
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostMachineResponse"

      requestBody:
        description: Newly created organization.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostMachineRequest"

    delete:
      tags:
        - Machine Authentification
      description: Delete machine account
      summary: Delete machine account
      operationId: deleteMachine
      responses:
        200:
          description: successful operation

  ############################## Check connection ######################################

  /health:
    servers:
      - url: https://api.hiddb.io
    get:
      tags:
        - Check health
      description: Check access to databases
      summary: Check health database
      responses:
        "200":
          description: successfull operation
          content:
            text/plain:
              schema:
                type: string
                default: Ok
                enum:
                  - Ok

  ############################## Organizations #############################################

  /organization:
    get:
      tags:
        - Organization
      description: Get information about organizations
      summary: Get organizations
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationsResponse"

    post:
      tags:
        - Organization
      description: Create new organization
      summary: Create organization
      requestBody:
        description: Newly created organization.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"

  /organization/{organization_id}:
    parameters:
      - $ref: "#/components/parameters/OrganizationId"

    get:
      tags:
        - Organization
      description: Get information about specific organization
      summary: Get organization
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"
    delete:
      tags:
        - Organization
      description: Delete a specific organization
      summary: Delete organization
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"

  ############################## Users #############################################

  /user:
    get:
      tags:
        - User
      description: Get information about user in organization
      summary: Get users
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"

  /user/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserId"

    get:
      tags:
        - User
      description: Get information about specific user
      summary: Get user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
        - User
      description: Delete a specific user
      summary: Delete user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  ############################## Databases #############################################

  /database:
    get:
      tags:
        - Database
      description: Get information about databases
      summary: Get databases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabasesResponse"

    post:
      tags:
        - Database
      description: Create new database
      summary: Create database
      requestBody:
        description: Newly created database.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"

  /database/{database_id}:
    parameters:
      - $ref: "#/components/parameters/DatabaseId"

    get:
      tags:
        - Database
      description: Get information about specific database
      summary: Get database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"
    delete:
      tags:
        - Database
      description: Delete a specific database
      summary: Delete database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"

  ############################## Instances #############################################

  /instance:
    get:
      tags:
        - Instance
      description: Get information about instances
      summary: Get instances
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstancesResponse"

    post:
      tags:
        - Instance
      description: Create new instance
      summary: Create instance
      requestBody:
        description: Newly created Instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

  /instance/{instance_id}:
    parameters:
      - $ref: "#/components/parameters/InstanceId"

    get:
      tags:
        - Instance
      description: Get information about specific instance
      summary: Get instance
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

    put:
      tags:
        - Instance
      description: Awake or put instance to sleep
      summary: Instance awake, sleep
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SleepAwakeInstance"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

    delete:
      tags:
        - Instance
      description: Delete a specific Instance
      summary: Delete instance
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

  ############################## Collection #############################################

  /collection:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations

    get:
      tags:
        - Collection
      description: Get information about collections
      summary: Get collections
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionsResponse"

    post:
      tags:
        - Collection
      description: Create new collection
      summary: Create collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionRequest"
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"
        400:
          description: invalid parameters

  /collection/{collection_id}:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    get:
      tags:
        - Collection
      description: Get information about a specific collection
      summary: Get collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            minLength: 3
            maxLength: 20
            pattern: "^[a-z0-9]{3,20}$"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"

    delete:
      tags:
        - Collection
      description: Delete a specific collection
      summary: Delete collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            minLength: 3
            maxLength: 20
            pattern: "^[a-z0-9]{3,20}$"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponse"

  ############################## Index ##################################################

  /collection/{collection_id}/index:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    parameters:
      - $ref: "#/components/parameters/CollectionId"

    get:
      tags:
        - Index
      description: Get information about an existing indices
      summary: Get indices
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndicesResponse"

    post:
      tags:
        - Index
      description: Create new index in the specified collection
      summary: Create index
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexRequest"
        required: true
      responses:
        200:
          description: successful operation

  /collection/{collection_id}/index/{index_id}:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    parameters:
      - $ref: "#/components/parameters/CollectionId"
      - $ref: "#/components/parameters/IndexId"

    get:
      tags:
        - Index
      description: Get information about specific index
      summary: Get index
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexResponse"
        400:
          description: invalid parameters

    delete:
      tags:
        - Index
      description: Delete index
      summary: Delete index
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexResponse"
        400:
          description: invalid parameters

  ############################## Document ###############################################

  /collection/{collection_id}/document:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    parameters:
      - $ref: "#/components/parameters/CollectionId"

    post:
      tags:
        - Document
      description:
        Insert document. The field "field_id" will be indexed by all existing
        indices
      summary: Insert document
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentRequest"
        required: true
      responses:
        200:
          description: Insertion successful

  /collection/{collection_id}/document/search:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    parameters:
      - $ref: "#/components/parameters/CollectionId"

    post:
      tags:
        - Document
      description: "Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead"
      summary: ANN-search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        200:
          description: Insertion successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"

  /collection/{collection_id}/document/{document_id}:
    servers:
      - url: https://{database_id}.hiddb.io
        description: General operations
    parameters:
      - $ref: "#/components/parameters/CollectionId"
      - $ref: "#/components/parameters/DocumentId"

    get:
      tags:
        - Document
      description: Get document by ID
      summary: Get document by ID
      responses:
        200:
          description: Insertion successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"

    delete:
      tags:
        - Document
      description: This feature is not available yet but coming soon! Remove document by ID. The corresponding indices will be updated
      summary: Remove document by ID
      responses:
        200:
          description: Insertion successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponse"

############################## Components #############################################

components:
  parameters:
    UserId:
      name: user_id
      in: path
      description: "Your user ID. You can find your user ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    OrganizationId:
      name: organization_id
      in: path
      description: "Your organization ID. You can find your organization ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    InstanceId:
      name: instance_id
      in: path
      description: "The ID of the instance"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    DatabaseId:
      name: database_id
      in: path
      description: "The ID of the database"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    CollectionId:
      name: collection_id
      in: path
      description: "The ID of the collection"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

    IndexId:
      name: index_id
      in: path
      description: "The ID of the index"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

    DocumentId:
      name: document_id
      in: path
      description: "The ID of the index"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

  schemas:
    MachineLogin:
      type: object
      properties:
        access_key:
          type: string
          minLength: 20
          maxLength: 20
        secret_key:
          type: string
          minLength: 20
          maxLength: 20

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          pattern: ^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$
        password:
          type: string
          format: password

    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
          pattern: ^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$
        password:
          type: string
          format: password

    UserRefresh:
      type: object

    UserVerify:
      type: object
      properties:
        user_id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{18,18}$"
        otp_id:
          type: string

    UserReset:
      type: object
      properties:
        email:
          type: string
          format: email
          pattern: ^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$

    UserUpdateReset:
      type: object
      properties:
        user_id:
          type: string
        otp_id:
          type: string
        password:
          type: string
          format: password

    PostMachineRequest:
      allOf:
        - type: object
          properties:
            permission:
              type: string
              enum:
                - "write"
                - "read"

    PostMachineResponse:
      type: object
      allOf:
        - type: object
          properties:
            key:
              type: string
              minLength: 20
              maxLength: 20
            secret:
              type: string
              minLength: 20
              maxLength: 20
            organization:
              type: string
              minLength: 18
              maxLength: 18
            permission:
              type: string
              enum:
                - "write"
                - "read"

    OrganizationResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
            name:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"
            created_at:
              type: string
              format: date-time
            deleted_at:
              type: string
              format: date-time
              nullable: true

    OrganizationsResponse:
      allOf:
        - type: object
          properties:
            organizations:
              type: array
              items:
                $ref: "#/components/schemas/OrganizationResponse"

    OrganizationRequest:
      allOf:
        - type: object
          properties:
            name:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"

    UserResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
            name:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"
            organization_id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
              example: "xxxxxxxxxxxxxxxxxx"
            created_at:
              type: string
              format: date-time
            deleted_at:
              type: string
              format: date-time
              nullable: true

    UsersResponse:
      allOf:
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/UserResponse"

    InstanceRequest:
      allOf:
        - type: object
          properties:
            database_id:
              type: string
              pattern: "^[a-z0-9]{18,18}$"
              example: "xxxxxxxxxxxxxxxxxx"
              minLength: 3
            type:
              type: string
              description: Instance type
              default: s
              example: s
              enum:
                - free
                - s
                - m
                - l
            volume_size:
              type: number
              description: Size of mounted and volume in gb
              default: 10
              example: 100
              minimum: 10
              maximum: 10000
              multipleOf: 1

    InstanceResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
            created_at:
              type: string
              format: date-time
            deleted_at:
              type: string
              format: date-time
              nullable: true
            status:
              type: string
              enum: ["awake", "asleep"]
            type:
              type: string
              description: Instance type
              default: s
              example: s
              enum:
                - free
                - s
                - m
                - l
            server:
              type: object
              properties:
                id:
                  type: string
                  minLength: 18
                  maxLength: 18
                  pattern: "^[a-z0-9]{18,18}$"
            volume_size:
              type: number
              description: Size of mounted and volume in gb
              default: 10
              example: 100
              minimum: 10
              maximum: 10000
              multipleOf: 1

    InstancesResponse:
      allOf:
        - type: object
          properties:
            instances:
              type: array
              items:
                $ref: "#/components/schemas/InstanceResponse"

    SleepAwakeInstance:
      allOf:
        - type: object
          properties:
            status:
              type: string
              enum: ["awake", "asleep"]

    DatabaseRequest:
      allOf:
        - type: object
          properties:
            database_name:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"

    DatabaseResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 18
              maxLength: 18
            database_name:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"
            organization_id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{3,20}$"
              example: "xxxxxxxxxxxxxxxxxx"
            created_at:
              type: string
              format: date-time
            deleted_at:
              type: string
              format: date-time
              nullable: true
            instances:
              type: array
              items:
                $ref: "#/components/schemas/InstanceResponse"

    DatabasesResponse:
      allOf:
        - type: object
          properties:
            databases:
              type: array
              items:
                $ref: "#/components/schemas/DatabaseResponse"

    CollectionRequest:
      description: Collection details
      allOf:
        - type: object
          properties:
            collection_id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
              example: "xxxxxxxxxxxxxxxxxx"

    CollectionsResponse:
      allOf:
        - type: object
          properties:
            collections:
              type: array
              items:
                $ref: "#/components/schemas/CollectionResponse"

    CollectionResponse:
      allOf:
        - type: object
          properties:
            collection_id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
              example: "xxxxxxxxxxxxxxxxxx"

    IndexRequest:
      type: object
      properties:
        field_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

        dimension:
          type: integer
          format: int64

    DocumentRequest:
      additionalProperties: true
      properties:
        documents:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                minLength: 18
                maxLength: 18
                pattern: "^[a-z0-9]{18,18}$"
              field:
                type: array
                items:
                  type: number
                  format: double
                example: [1.0, 2.0, 3.0]

    DocumentResponse:
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{18,18}$"
        field:
          type: array
          items:
            type: number
            format: double
          example: [1.0, 2.0, 3.0]

    IndexResponse:
      type: object
      properties:
        collection_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        field_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        size:
          type: integer
          format: int64
        distance_metric:
          type: string
          enum: ["euclidean"]
        dimension:
          type: integer
          format: int64

    IndicesResponse:
      allOf:
        - type: object
          properties:
            indices:
              type: array
              items:
                $ref: "#/components/schemas/IndexResponse"

    SearchRequest:
      allOf:
        - type: object
          properties:
            vector:
              type: array
              items:
                type: number
              example: [1.0, 2.0, 3.0]
              description: Get documents close to the vector. The length of the vector must be equal to the dimension specified in the index
            max_neighbors:
              type: number
              default: 20
              minimum: 1
              description: Maximal number of neighbors to include in response
            field_id:
              type: string
              minLength: 3
              maxLength: 20
              pattern: "^[a-z0-9]{3,20}$"
              description: This parameter specifies the index to perform the query in
              example: "xxxxxxxxxxxxxxxxxx"

    SearchResponse:
      type: array
      items:
        type: string
