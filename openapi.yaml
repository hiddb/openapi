openapi: 3.0.0
servers:
  - url: https://{service}.hiddb.io
    description: Access to your HIDDB databases
    variables:
      service:
        default: api
        enum:
          - "api"
          - "{database_id}"

info:
  description: |
    This is the official API documentation for the HIDDB vector search database.

    # Getting started

    In order to get started you will need to generate a API access key and secret token.
    Sign in into the your [dashboard](https://hiddb.com/dashboard) and navigate to `API Tokens`.
    Make sure to copy the token because it won't be shown to you again.

    Now you have to sign in your machine by requesting a temporary JSON Web Token (JWT) by performing a GET request to `hiddb.io/machine/login`.

    You're now ready to do your first request against the API.
    You can try make a simple GET request to `/health/dashboard` and `/health/database` using your JWT.
    If the response is `OK` for both requests everything worked out. 
    Congratulations your have now full and secure control over your personal HIDDB database.

  version: 0.2.2
  title: API documentation
  termsOfService: "https:/hiddb.com/terms"
  license:
    name: Propretary Licence
    url: "https://hiddb.com/licence"
tags:
  - name: Check health
    description: Check if you are all good
  - name: User Authentification
    description: User authentification
  - name: Machine Authentification
    description: Machine authentification
  - name: Database
    description: Operations on databases
  - name: Instance
    description: Operations on instances
  - name: Collection
    description: Operations on collections
  - name: Index
    description: Operations on indices
  - name: Document
    description: Operations on documents

paths:
  ############################## User Authentification ######################################

  /user/register:
    post:
      tags:
        - User Authentification
      summary: Register user
      description: Register user. Email containing URL with OTP is send out to user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true

  /user/update/verify:
    post:
      tags:
        - User Authentification
      summary: Verify user's email
      description: Verify email adress provided by the user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserVerify"
        required: true

  /user/reset:
    post:
      tags:
        - User Authentification
      summary: User password reset
      description: Send URL containing OTP to email adress provided by user to reset password.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserReset"
        required: true

  /user/update/reset:
    post:
      tags:
        - User Authentification
      summary: Update password
      description: Reset password as requested by the user.
      responses:
        200:
          description: successful operation
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateReset"
        required: true

  /user/login:
    post:
      tags:
        - User Authentification
      description: User login using access and secret token.
      summary: User login
      operationId: userLogin

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Login email and password in exchange for JWT.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true

  /user/refresh:
    post:
      tags:
        - User Authentification
      description: Refresh access token using cookie
      summary: Refresh JWT
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Exchange access and secret token for JSON web token (JWT).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRefresh"
        required: true

  ############################## Machine Authentification ######################################

  /machine/login:
    post:
      tags:
        - Machine Authentification
      description: Machine login using access and secret token.
      summary: Machine login
      operationId: machineLogin

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: invalid parameters
        401:
          description: invalid input
        403:
          description: unauthorized
        405:
          description: forbidden
      requestBody:
        description: Exchange access and secret token for JSON web token (JWT).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineLogin"
        required: true

  /machine:
    post:
      tags:
        - Create Machine Account
      description: Create a new machine
      summary: New machine
      operationId: createMachine
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostMachineResponse"

      requestBody:
        description: Newly created organization.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostMachineRequest"

    get:
      tags:
        - Machine Authentification
      description: Get all machines in organization
      summary: Get all machines
      operationId: getMachines
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMachinesResponse"

  /machine/{machine_id}:
    parameters:
      - $ref: "#/components/parameters/MachineId"

    delete:
      tags:
        - Machine Authentification
      description: Delete machine account
      summary: Delete machine account
      operationId: deleteMachine
      responses:
        200:
          description: successful operation

  ############################## Check connection ######################################

  /health:
    servers:
      - url: https://api.hiddb.io
    get:
      tags:
        - Check health
      description: Check access to databases
      summary: Check health database
      responses:
        "200":
          description: successfull operation
          content:
            text/plain:
              schema:
                type: string
                default: Ok
                enum:
                  - Ok

  ############################## Databases #############################################

  /database:
    get:
      tags:
        - Database
      description: Get information about databases
      summary: Get databases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabasesResponse"

    post:
      tags:
        - Database
      description: Create new database
      summary: Create database
      requestBody:
        description: Newly created database.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"

  /database/{database_id}:
    parameters:
      - $ref: "#/components/parameters/DatabaseId"

    get:
      tags:
        - Database
      description: Get information about specific database
      summary: Get database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"
    delete:
      tags:
        - Database
      description: Delete a specific database
      summary: Delete database
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseResponse"

  ############################## Instances #############################################

  /instance:
    get:
      tags:
        - Instance
      description: Get information about instances
      summary: Get instances
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstancesResponse"

    post:
      tags:
        - Instance
      description: Create new instance
      summary: Create instance
      requestBody:
        description: Newly created Instance.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

  /instance/{instance_id}:
    parameters:
      - $ref: "#/components/parameters/InstanceId"

    get:
      tags:
        - Instance
      description: Get information about specific instance
      summary: Get instance
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

    put:
      tags:
        - Instance
      description: Awake or put instance to sleep
      summary: Instance awake, sleep
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SleepAwakeInstance"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

    delete:
      tags:
        - Instance
      description: Delete a specific Instance
      summary: Delete instance
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceResponse"

  ############################## Collection #############################################

  # /collection:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations

  #   get:
  #     tags:
  #       - Collection
  #     description: Get information about collections
  #     summary: Get collections
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionsResponse"

  #   post:
  #     tags:
  #       - Collection
  #     description: Create new collection
  #     summary: Create collection
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/CollectionRequest"
  #       required: true
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"
  #       400:
  #         description: invalid parameters

  # /collection/{collection_id}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   get:
  #     tags:
  #       - Collection
  #     description: Get information about a specific collection
  #     summary: Get collection
  #     parameters:
  #       - name: collection_id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           minLength: 3
  #           maxLength: 20
  #           pattern: "^[a-z0-9]{3,20}$"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"

  #   delete:
  #     tags:
  #       - Collection
  #     description: Delete a specific collection
  #     summary: Delete collection
  #     parameters:
  #       - name: collection_id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           minLength: 3
  #           maxLength: 20
  #           pattern: "^[a-z0-9]{3,20}$"
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CollectionResponse"

  # ############################## Index ##################################################

  # /collection/{collection_id}/index:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   get:
  #     tags:
  #       - Index
  #     description: Get information about an existing indices
  #     summary: Get indices
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndicesResponse"

  #   post:
  #     tags:
  #       - Index
  #     description: Create new index in the specified collection
  #     summary: Create index
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/IndexRequest"
  #       required: true
  #     responses:
  #       200:
  #         description: successful operation

  # /collection/{collection_id}/index/{index_id}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"
  #     - $ref: "#/components/parameters/IndexId"

  #   get:
  #     tags:
  #       - Index
  #     description: Get information about specific index
  #     summary: Get index
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndexResponse"
  #       400:
  #         description: invalid parameters

  #   delete:
  #     tags:
  #       - Index
  #     description: Delete index
  #     summary: Delete index
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/IndexResponse"
  #       400:
  #         description: invalid parameters

  # ############################## Document ###############################################

  # /collection/{collection_id}/document:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   post:
  #     tags:
  #       - Document
  #     description:
  #       Insert document. The field "field_id" will be indexed by all existing
  #       indices
  #     summary: Insert document
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/DocumentRequest"
  #       required: true
  #     responses:
  #       200:
  #         description: Insertion successful

  # /collection/{collection_id}/document/search:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"

  #   post:
  #     tags:
  #       - Document
  #     description: "Search for nearest vectors to specified vector. Instead of specifying `vector: <array>` you can search for similar documents directly by setting `id: <document_id>` instead"
  #     summary: ANN-search
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/SearchRequest"
  #       required: true
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/SearchResponse"

  # /collection/{collection_id}/document/{document_id}:
  #   servers:
  #     - url: https://{database_id}.hiddb.io
  #       description: General operations
  #   parameters:
  #     - $ref: "#/components/parameters/CollectionId"
  #     - $ref: "#/components/parameters/DocumentId"

  #   get:
  #     tags:
  #       - Document
  #     description: Get document by ID
  #     summary: Get document by ID
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/DocumentResponse"

  #   delete:
  #     tags:
  #       - Document
  #     description: This feature is not available yet but coming soon! Remove document by ID. The corresponding indices will be updated
  #     summary: Remove document by ID
  #     responses:
  #       200:
  #         description: Insertion successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/DocumentResponse"

############################## Components #############################################

components:
  parameters:
    UserId:
      name: user_id
      in: path
      description: "Your user ID. You can find your user ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    MachineId:
      name: machine_id
      in: path
      description: "The ID of the machine"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    OrganizationId:
      name: organization_id
      in: path
      description: "Your organization ID. You can find your organization ID in your dashboard"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    InstanceId:
      name: instance_id
      in: path
      description: "The ID of the instance"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    DatabaseId:
      name: database_id
      in: path
      description: "The ID of the database"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 18
        maxLength: 18
        pattern: "^[a-z0-9]{18}$"

    CollectionId:
      name: collection_id
      in: path
      description: "The ID of the collection"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

    IndexId:
      name: index_id
      in: path
      description: "The ID of the index"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

    DocumentId:
      name: document_id
      in: path
      description: "The ID of the index"
      example: "xxxxxxxxxxxxxxxxxx"
      required: true
      schema:
        type: string
        minLength: 3
        maxLength: 20
        pattern: "^[a-z0-9]{3,20}$"

  schemas:
    LoginResponse:
      type: object
      required:
        - access_token
        - type
      properties:
        access_token:
          type: string
        type:
          type: string
          enum: ["Bearer"]
    MachineLogin:
      type: object
      required:
        - access_key
        - secret_key
      properties:
        access_key:
          type: string
          minLength: 20
          maxLength: 20
        secret_key:
          type: string
          minLength: 20
          maxLength: 20

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserRegister:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserRefresh:
      type: object

    UserVerify:
      type: object
      required:
        - user_id
        - otp_id
      properties:
        user_id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{18,18}$"
        otp_id:
          type: string

    UserReset:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    UserUpdateReset:
      type: object
      required:
        - user_id
        - otp_id
        - password
      properties:
        user_id:
          type: string
        otp_id:
          type: string
        password:
          type: string
          format: password

    PostMachineRequest:
      type: object
      required:
        - machine_name
        - permission
      properties:
        machine_name:
          type: string
          minLength: 3
          maxLength: 20
        permission:
          type: string
          enum:
            - "write"
            - "read"
            - "admin"

    PostMachineResponse:
      type: object
      required:
        - machine_name
        - id
        - key
        - secret
        - permission
      properties:
        machine_name:
          type: string
          minLength: 3
          maxLength: 20
        id:
          type: string
          minLength: 18
          maxLength: 18
        key:
          type: string
          minLength: 20
          maxLength: 20
        secret:
          type: string
          minLength: 20
          maxLength: 20
        permission:
          type: string
          enum:
            - "write"
            - "read"
            - "admin"

    GetMachinesResponse:
      type: object
      properties:
        machines:
          type: array
          items:
            type: object
            required:
              - machine_name
              - id
              - key
              - permission
            properties:
              machine_name:
                type: string
                minLength: 3
                maxLength: 20
              id:
                type: string
                minLength: 18
                maxLength: 18
              key:
                type: string
                minLength: 20
                maxLength: 20
              permission:
                type: string
                enum:
                  - "write"
                  - "read"
                  - "admin"

    InstanceRequest:
      type: object
      required:
        - database_id
        - type
        - volume_size
      properties:
        database_id:
          type: string
          pattern: "^[a-z0-9]{18,18}$"
          example: "xxxxxxxxxxxxxxxxxx"
          minLength: 3
        type:
          type: string
          description: Instance type
          default: s
          example: s
          enum:
            - xs
            - s
            - m
            - l
            - xl
        volume_size:
          type: number
          description: Size of mounted and volume in gb
          default: 10
          example: 100
          minimum: 10
          maximum: 10000
          multipleOf: 1

    InstanceResponse:
      type: object
      required:
        - id
        - created_at
        - deleted_at
        - status
        - type
        - server
        - volume_size
      properties:
        id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{18,18}$"
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: ["awake", "asleep"]
        type:
          type: string
          description: Instance type
          default: s
          example: s
          enum:
            - xs
            - s
            - m
            - l
            - xl
        server:
          type: object
          required:
            - id
          properties:
            id:
              type: string
              minLength: 18
              maxLength: 18
              pattern: "^[a-z0-9]{18,18}$"
        volume_size:
          type: number
          description: Size of mounted and volume in gb
          default: 10
          example: 100
          minimum: 10
          maximum: 10000
          multipleOf: 1

    InstancesResponse:
      type: object
      required:
        - instances
      properties:
        instances:
          type: array
          items:
            $ref: "#/components/schemas/InstanceResponse"

    SleepAwakeInstance:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: ["awake", "asleep"]

    DatabaseRequest:
      type: object
      required:
        - database_name
      properties:
        database_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"

    DatabaseResponse:
      type: object
      required:
        - id
        - database_name
        - organization_id
        - created_at
        - deleted_at
        - instances
      properties:
        id:
          type: string
          minLength: 18
          maxLength: 18
        database_name:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
        organization_id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
        instances:
          type: array
          items:
            $ref: "#/components/schemas/InstanceResponse"

    DatabasesResponse:
      type: object
      required:
        - databases
      properties:
        databases:
          type: array
          items:
            $ref: "#/components/schemas/DatabaseResponse"

    CollectionRequest:
      description: Collection details
      type: object
      required:
        - collection_id
      properties:
        collection_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

    CollectionsResponse:
      type: object
      required:
        - collections
      properties:
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionResponse"

    CollectionResponse:
      type: object
      required:
        - collection_id
      properties:
        collection_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

    IndexRequest:
      type: object
      required:
        - field_id
        - dimension
      properties:
        field_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"

        dimension:
          type: integer
          format: int64

    DocumentRequest:
      additionalProperties: true
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                minLength: 18
                maxLength: 18
                pattern: "^[a-z0-9]{18,18}$"
              field:
                type: array
                items:
                  type: number
                  format: double
                example: [1.0, 2.0, 3.0]

    DocumentResponse:
      type: object
      additionalProperties: true
      required:
        - id
      properties:
        id:
          type: string
          minLength: 18
          maxLength: 18
          pattern: "^[a-z0-9]{18,18}$"
        field:
          type: array
          items:
            type: number
            format: double
          example: [1.0, 2.0, 3.0]

    IndexResponse:
      type: object
      required:
        - collection_id
        - field_id
        - size
        - distance_metric
        - dimension
      properties:
        collection_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        field_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          example: "xxxxxxxxxxxxxxxxxx"
        size:
          type: integer
          format: int64
        distance_metric:
          type: string
          enum: ["euclidean"]
        dimension:
          type: integer
          format: int64

    IndicesResponse:
      type: object
      required:
        - indices
      properties:
        indices:
          type: array
          items:
            $ref: "#/components/schemas/IndexResponse"

    SearchRequest:
      type: object
      required:
        - vector
        - max_neighbors
        - field_id
      properties:
        vector:
          type: array
          items:
            type: number
          example: [1.0, 2.0, 3.0]
          description: Get documents close to the vector. The length of the vector must be equal to the dimension specified in the index
        max_neighbors:
          type: number
          default: 20
          minimum: 1
          description: Maximal number of neighbors to include in response
        field_id:
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-z0-9]{3,20}$"
          description: This parameter specifies the index to perform the query in
          example: "xxxxxxxxxxxxxxxxxx"

    SearchResponse:
      type: array
      items:
        type: string
